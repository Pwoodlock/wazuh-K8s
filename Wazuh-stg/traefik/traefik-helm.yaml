additionalArguments:
  - --providers.kubernetesingress.ingressendpoint.publishedservice=traefik/traefik
additionalVolumeMounts: []
affinity: {}
autoscaling:
  enabled: true
  maxReplicas: 10
  minReplicas: 3
certResolvers: {}
commonLabels: {}
deployment:
  additionalContainers: []
  additionalVolumes: []
  annotations: {}
  dnsConfig: {}
  enabled: true
  imagePullSecrets: []
  initContainers: []
  kind: Deployment
  labels: {}
  lifecycle: {}
  minReadySeconds: 0
  podAnnotations: {}
  podLabels: {}
  replicas: 3
  runtimeClassName: null
  shareProcessNamespace: false
  terminationGracePeriodSeconds: 60
env:
  - name: POD_NAME
    valueFrom:
      fieldRef:
        fieldPath: metadata.name
  - name: POD_NAMESPACE
    valueFrom:
      fieldRef:
        fieldPath: metadata.namespace
envFrom: []
experimental:
  kubernetesGateway:
    enabled: false
  plugins: {}
extraObjects: []
globalArguments: []
hostNetwork: false
image:
  pullPolicy: IfNotPresent
  registry: docker.io
  repository: traefik
ingressClass:
  enabled: true
  isDefaultClass: true
ingressRoute:
  dashboard:
    annotations: {}
    enabled: true
    entryPoints:
      - traefik
    labels: {}
    matchRule: PathPrefix(`/dashboard`) || PathPrefix(`/api`)
    middlewares: []
    tls: {}
  healthcheck:
    annotations: {}
    enabled: false
    entryPoints:
      - traefik
    labels: {}
    matchRule: PathPrefix(`/ping`)
    middlewares: []
    tls: {}
livenessProbe:
  failureThreshold: 3
  initialDelaySeconds: 2
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 2
logs:
  access:
    enabled: false
    fields:
      general:
        defaultmode: keep
        names: {}
      headers:
        defaultmode: drop
        names: {}
    filters: {}
  general:
    level: ERROR
metrics:
  prometheus:
    entryPoint: metrics
nodeSelector: {}
persistence:
  accessMode: ReadWriteOnce
  annotations: {}
  enabled: false
  name: data
  path: /data
  size: 128Mi
podDisruptionBudget:
  enabled: true
  maxUnavailable: 33%
podSecurityContext:
  fsGroupChangePolicy: OnRootMismatch
  runAsGroup: 65532
  runAsNonRoot: true
  runAsUser: 65532
podSecurityPolicy:
  enabled: false
ports:
  wazuh-agent-link:
    expose:
      default: false
    exposedPort: 1514
    port: 1514
  wazuh-agent-enrol:  
    expose:
      default: false
    exposedPort: 1515
    port: 1515
    protocol: TCP
  metrics:
    expose:
      default: false
    exposedPort: 9100
    port: 9100
    protocol: TCP
  traefik:
    expose:
      default: false
    exposedPort: 9000
    port: 9000
    protocol: TCP
  web:
    expose:
      default: true
    exposedPort: 80
    forwardedHeaders:
      trustedIPs:
        - 127.0.0.1/32
        - 10.0.0.0/8
    port: 8000
    protocol: TCP
    proxyProtocol:
      trustedIPs:
        - 127.0.0.1/32
        - 10.0.0.0/8
    redirectTo:
      port: websecure
  websecure:
    expose:
      default: true
    exposedPort: 443
    forwardedHeaders:
      trustedIPs:
        - 127.0.0.1/32
        - 10.0.0.0/8
    http3:
      enabled: false
    middlewares: []
    port: 8443
    protocol: TCP
    proxyProtocol:
      trustedIPs:
        - 127.0.0.1/32
        - 10.0.0.0/8
    tls:
      certResolver: ""
      domains: []
      enabled: true
      options: ""
priorityClassName: ""
providers:
  file:
    content: ""
    enabled: false
    watch: true
  kubernetesCRD:
    allowCrossNamespace: false
    allowEmptyServices: false
    allowExternalNameServices: false
    enabled: true
    namespaces: []
  kubernetesIngress:
    allowEmptyServices: false
    allowExternalNameServices: false
    disableIngressClassLookup: false
    enabled: true
    namespaces: []
    publishedService:
      enabled: false
rbac:
  enabled: true
  namespaced: false
  secretResourceNames: []
readinessProbe:
  failureThreshold: 1
  initialDelaySeconds: 2
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 2
resources:
  limits:
    cpu: 300m
    memory: 150Mi
  requests:
    cpu: 100m
    memory: 50Mi
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
service:
  additionalServices: {}
  annotations:
    load-balancer.hetzner.cloud/algorithm-type: round_robin
    load-balancer.hetzner.cloud/disable-private-ingress: "true"
    load-balancer.hetzner.cloud/disable-public-network: "false"
    load-balancer.hetzner.cloud/health-check-interval: 15s
    load-balancer.hetzner.cloud/health-check-retries: "3"
    load-balancer.hetzner.cloud/health-check-timeout: 10s
    load-balancer.hetzner.cloud/ipv6-disabled: "false"
    load-balancer.hetzner.cloud/location: nbg1
    load-balancer.hetzner.cloud/name: siem-traefik
    load-balancer.hetzner.cloud/type: lb11
    load-balancer.hetzner.cloud/use-private-ip: "true"
    load-balancer.hetzner.cloud/uses-proxyprotocol: "true"
  annotationsTCP: {}
  annotationsUDP: {}
  enabled: true
  externalIPs: []
  labels: {}
  loadBalancerSourceRanges: []
  single: true
  spec: {}
  type: LoadBalancer
serviceAccount:
  name: ""
serviceAccountAnnotations: {}
startupProbe: null
tlsOptions: {}
tlsStore: {}
tolerations: []
topologySpreadConstraints: []
tracing: {}
updateStrategy:
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0
  type: RollingUpdate
volumes: []
